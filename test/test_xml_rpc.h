/**
 * C client stub to invoke services exported by the XML-RPC component: test.
 *
 * This file was generated by xml-rpc-gen tool, from Vortex Library
 * project.
 *
 * Vortex Library homepage: http://vortex.aspl.es
 * Axl Library homepage: http://xml.aspl.es
 * Advanced Software Production Line: http://www.aspl.es
 */
#ifndef __XML_RPC_TEST_H__
#define __XML_RPC_TEST_H__

#include <test_types.h>
/* include base library */
#include <vortex.h>
/* include xml-rpc library */
#include <vortex_xml_rpc.h>

/* support for c++ declarations */
BEGIN_C_DECLS

/* service: sum */
int test_sum_int_int_s (int a, int b, VortexChannel * channel, XmlRpcResponseStatus * status, int * fault_code, char ** fault_string);
void test_sum_int_int (int a, int b, VortexChannel * channel, XmlRpcProcessInt process);

/* service: operate */
int test_operate_int_int_s (int a, int b, VortexChannel * channel, XmlRpcResponseStatus * status, int * fault_code, char ** fault_string);
void test_operate_int_int (int a, int b, VortexChannel * channel, XmlRpcProcessInt process);

/* service: get_the_string */
char * test_get_the_string_s (VortexChannel * channel, XmlRpcResponseStatus * status, int * fault_code, char ** fault_string);
void test_get_the_string (VortexChannel * channel, XmlRpcProcessString process);

/* service: get_the_bool_1 */
axl_bool test_get_the_bool_1_s (VortexChannel * channel, XmlRpcResponseStatus * status, int * fault_code, char ** fault_string);
void test_get_the_bool_1 (VortexChannel * channel, XmlRpcProcessInt process);

/* service: get_the_bool_2 */
axl_bool test_get_the_bool_2_s (VortexChannel * channel, XmlRpcResponseStatus * status, int * fault_code, char ** fault_string);
void test_get_the_bool_2 (VortexChannel * channel, XmlRpcProcessInt process);

/* service: get_double_sum */
double test_get_double_sum_double_double_s (double a, double b, VortexChannel * channel, XmlRpcResponseStatus * status, int * fault_code, char ** fault_string);
void test_get_double_sum_double_double (double a, double b, VortexChannel * channel, XmlRpcProcessDouble process);

/* service: get_struct */
Values * test_get_struct_values_values_s (Values * a, Values * b, VortexChannel * channel, XmlRpcResponseStatus * status, int * fault_code, char ** fault_string);
void test_get_struct_values_values (Values * a, Values * b, VortexChannel * channel, XmlRpcProcessStruct process);

/* service: get_array */
ItemArray * test_get_array_s (VortexChannel * channel, XmlRpcResponseStatus * status, int * fault_code, char ** fault_string);
void test_get_array (VortexChannel * channel, XmlRpcProcessArray process);

/* service: get_list */
Node * test_get_list_s (VortexChannel * channel, XmlRpcResponseStatus * status, int * fault_code, char ** fault_string);
void test_get_list (VortexChannel * channel, XmlRpcProcessStruct process);

/* service: sum2 */
int test_sum2_int_int_s (int a, int b, VortexChannel * channel, XmlRpcResponseStatus * status, int * fault_code, char ** fault_string);
void test_sum2_int_int (int a, int b, VortexChannel * channel, XmlRpcProcessInt process);


END_C_DECLS

#endif
